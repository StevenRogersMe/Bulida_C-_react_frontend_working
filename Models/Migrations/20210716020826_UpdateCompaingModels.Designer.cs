// <auto-generated />
using System;
using System.Collections.Generic;
using Dal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Dal.Migrations
{
    [DbContext(typeof(CampaingContext))]
    [Migration("20210716020826_UpdateCompaingModels")]
    partial class UpdateCompaingModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Core.Compaings.ADCompaing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AplicationUserId")
                        .HasColumnType("text");

                    b.Property<bool>("Broad")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Budget")
                        .HasColumnType("numeric");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Exact")
                        .HasColumnType("boolean");

                    b.Property<bool>("Modifier")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("NegativePhrase")
                        .HasColumnType("boolean");

                    b.Property<bool>("Phrase")
                        .HasColumnType("boolean");

                    b.Property<bool>("Skag")
                        .HasColumnType("boolean");

                    b.Property<bool>("Stag")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<bool>("ValidFlag")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AplicationUserId");

                    b.ToTable("Compaings");
                });

            modelBuilder.Entity("Core.Compaings.CompaingAdGroupExt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BusinessName")
                        .HasColumnType("text");

                    b.Property<int?>("CompaingGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Description1Position")
                        .HasColumnType("integer");

                    b.Property<string>("Description2")
                        .HasColumnType("text");

                    b.Property<int?>("Description2Position")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayURL")
                        .HasColumnType("text");

                    b.Property<string>("FinalMobileURL")
                        .HasColumnType("text");

                    b.Property<string>("FinalURL")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Headline1")
                        .HasColumnType("text");

                    b.Property<int?>("Headline1Position")
                        .HasColumnType("integer");

                    b.Property<string>("Headline2")
                        .HasColumnType("text");

                    b.Property<int?>("Headline2Position")
                        .HasColumnType("integer");

                    b.Property<string>("Headline3")
                        .HasColumnType("text");

                    b.Property<int?>("Headline3Position")
                        .HasColumnType("integer");

                    b.Property<string>("Path1")
                        .HasColumnType("text");

                    b.Property<string>("Path2")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("VerificationURL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompaingGroupId");

                    b.ToTable("CompaingAdGroupExt");
                });

            modelBuilder.Entity("Core.Compaings.CompaingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdGroup")
                        .HasColumnType("text");

                    b.Property<int>("CampignId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompaingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompaingId");

                    b.ToTable("CompaingGroups");
                });

            modelBuilder.Entity("Core.KeyWords.CompaingKeyWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompaingGroupId")
                        .HasColumnType("integer");

                    b.Property<List<string>>("KeyWords")
                        .HasColumnType("text[]");

                    b.Property<string>("KeywordGroupName")
                        .HasColumnType("text");

                    b.Property<int>("KeywordMatchType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompaingGroupId");

                    b.ToTable("KeyWords");
                });

            modelBuilder.Entity("Core.Users.AplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("LastName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Core.Widgets.CallOnlyAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdGroupName")
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .HasColumnType("text");

                    b.Property<int>("CompaingGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionOne")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionTwo")
                        .HasColumnType("text");

                    b.Property<string>("FinalUrl")
                        .HasColumnType("text");

                    b.Property<string>("HeadlineOne")
                        .HasColumnType("text");

                    b.Property<string>("HeadlineTwo")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("VerificationURL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompaingGroupId");

                    b.ToTable("CallOnlyAd");
                });

            modelBuilder.Entity("Core.Widgets.ExpTxtAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdGroupName")
                        .HasColumnType("text");

                    b.Property<int>("CompaingGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("DescriptionOne")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionTwo")
                        .HasColumnType("text");

                    b.Property<string>("FinalURL")
                        .HasColumnType("text");

                    b.Property<string>("HeadlineOne")
                        .HasColumnType("text");

                    b.Property<string>("HeadlineThree")
                        .HasColumnType("text");

                    b.Property<string>("HeadlineTwo")
                        .HasColumnType("text");

                    b.Property<string>("PathOne")
                        .HasColumnType("text");

                    b.Property<string>("PathTwo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompaingGroupId");

                    b.ToTable("ExpTxtAd");
                });

            modelBuilder.Entity("Core.Widgets.RespSearchAd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdGroupName")
                        .HasColumnType("text");

                    b.Property<int>("CompaingGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("DescriptionFour")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionOne")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionThree")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionTwo")
                        .HasColumnType("text");

                    b.Property<string>("FinalURL")
                        .HasColumnType("text");

                    b.Property<List<string>>("HeadLines")
                        .HasColumnType("text[]");

                    b.Property<string>("PathOne")
                        .HasColumnType("text");

                    b.Property<string>("PathTwo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompaingGroupId");

                    b.ToTable("RespSearchAd");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Compaings.ADCompaing", b =>
                {
                    b.HasOne("Core.Users.AplicationUser", "AplicationUser")
                        .WithMany("CompaingGroups")
                        .HasForeignKey("AplicationUserId");

                    b.Navigation("AplicationUser");
                });

            modelBuilder.Entity("Core.Compaings.CompaingAdGroupExt", b =>
                {
                    b.HasOne("Core.Compaings.CompaingGroup", "CompaingGroup")
                        .WithMany()
                        .HasForeignKey("CompaingGroupId");

                    b.Navigation("CompaingGroup");
                });

            modelBuilder.Entity("Core.Compaings.CompaingGroup", b =>
                {
                    b.HasOne("Core.Compaings.ADCompaing", "Compaing")
                        .WithMany("CompaingGroups")
                        .HasForeignKey("CompaingId");

                    b.Navigation("Compaing");
                });

            modelBuilder.Entity("Core.KeyWords.CompaingKeyWord", b =>
                {
                    b.HasOne("Core.Compaings.CompaingGroup", "CompaingGroup")
                        .WithMany("KeyWords")
                        .HasForeignKey("CompaingGroupId");

                    b.Navigation("CompaingGroup");
                });

            modelBuilder.Entity("Core.Widgets.CallOnlyAd", b =>
                {
                    b.HasOne("Core.Compaings.CompaingGroup", "CompaingGroup")
                        .WithMany("CallOnlyAds")
                        .HasForeignKey("CompaingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaingGroup");
                });

            modelBuilder.Entity("Core.Widgets.ExpTxtAd", b =>
                {
                    b.HasOne("Core.Compaings.CompaingGroup", "CompaingGroup")
                        .WithMany("ExpTxtAds")
                        .HasForeignKey("CompaingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaingGroup");
                });

            modelBuilder.Entity("Core.Widgets.RespSearchAd", b =>
                {
                    b.HasOne("Core.Compaings.CompaingGroup", "CompaingGroup")
                        .WithMany("RespSearchAds")
                        .HasForeignKey("CompaingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaingGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Users.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Users.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Users.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Users.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Compaings.ADCompaing", b =>
                {
                    b.Navigation("CompaingGroups");
                });

            modelBuilder.Entity("Core.Compaings.CompaingGroup", b =>
                {
                    b.Navigation("CallOnlyAds");

                    b.Navigation("ExpTxtAds");

                    b.Navigation("KeyWords");

                    b.Navigation("RespSearchAds");
                });

            modelBuilder.Entity("Core.Users.AplicationUser", b =>
                {
                    b.Navigation("CompaingGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
